# ============================================================================
# BugSpotter - Docker Compose Configuration
# ============================================================================
# Services:
# - api: Fastify REST API server
# - worker: BullMQ background job processor
# - postgres: PostgreSQL 16 database
# - redis: Redis 7 for BullMQ queues
# - minio: S3-compatible object storage
# ============================================================================

# Shared environment variables
x-common-env: &common-env
  # Database
  DATABASE_URL: postgresql://${POSTGRES_USER:-bugspotter}:${POSTGRES_PASSWORD:-bugspotter_dev_password}@postgres:5432/${POSTGRES_DB:-bugspotter}
  DB_POOL_MIN: ${DB_POOL_MIN:-2}
  DB_POOL_MAX: ${DB_POOL_MAX:-10}
  
  # Server
  NODE_ENV: ${NODE_ENV:-production}
  LOG_LEVEL: ${LOG_LEVEL:-info}
  
  # Storage (MinIO)
  STORAGE_BACKEND: ${STORAGE_BACKEND:-minio}
  S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
  S3_REGION: ${S3_REGION:-us-east-1}
  S3_ACCESS_KEY: ${MINIO_ROOT_USER}
  S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
  S3_BUCKET: ${MINIO_BUCKET:-bugspotter}
  S3_FORCE_PATH_STYLE: true
  
  # Redis/Queues
  REDIS_URL: redis://redis:6379
  
  # Encryption (for integrations)
  ENCRYPTION_KEY: ${ENCRYPTION_KEY}

services:
  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: bugspotter-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bugspotter}
      POSTGRES_USER: ${POSTGRES_USER:-bugspotter}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bugspotter_dev_password}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - bugspotter
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bugspotter} -d ${POSTGRES_DB:-bugspotter}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ==========================================================================
  # Redis Cache & Queue
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: bugspotter-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - bugspotter
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ==========================================================================
  # MinIO S3-Compatible Storage
  # ==========================================================================
  minio:
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z
    container_name: bugspotter-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"       # API port
      - "${MINIO_CONSOLE_PORT:-9001}:9001"  # Console UI
    networks:
      - bugspotter
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ==========================================================================
  # MinIO Client - Create Bucket on Startup
  # ==========================================================================
  minio-init:
    image: minio/mc:RELEASE.2024-10-08T09-37-26Z
    container_name: bugspotter-minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET:-bugspotter}
    volumes:
      - ./scripts/init-minio.sh:/init-minio.sh:ro
    networks:
      - bugspotter
    entrypoint: ["/bin/sh", "/init-minio.sh"]

  # ==========================================================================
  # BugSpotter API Server
  # ==========================================================================
  api:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
      target: production
    container_name: bugspotter-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      <<: *common-env
      # API-specific
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      
      # Retention
      DEFAULT_RETENTION_DAYS: ${DEFAULT_RETENTION_DAYS:-90}
      SCREENSHOT_RETENTION_DAYS: ${SCREENSHOT_RETENTION_DAYS:-60}
      REPLAY_RETENTION_DAYS: ${REPLAY_RETENTION_DAYS:-30}
      RETENTION_SCHEDULER_ENABLED: ${RETENTION_SCHEDULER_ENABLED:-true}
      
      # Workers
      WORKER_SCREENSHOT_ENABLED: ${WORKER_SCREENSHOT_ENABLED:-true}
      WORKER_REPLAY_ENABLED: ${WORKER_REPLAY_ENABLED:-true}
      WORKER_INTEGRATION_ENABLED: ${WORKER_INTEGRATION_ENABLED:-true}
      WORKER_NOTIFICATION_ENABLED: ${WORKER_NOTIFICATION_ENABLED:-true}
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      # Optional: Mount local storage directory
      - api_uploads:/app/data/uploads
    networks:
      - bugspotter
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================================================
  # BugSpotter Background Worker
  # ==========================================================================
  worker:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
      target: production
    container_name: bugspotter-worker
    restart: unless-stopped
    command: ["docker-entrypoint.sh", "worker"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      <<: *common-env
      # Worker-specific
      WORKER_SCREENSHOT_ENABLED: ${WORKER_SCREENSHOT_ENABLED:-true}
      WORKER_REPLAY_ENABLED: ${WORKER_REPLAY_ENABLED:-true}
      WORKER_INTEGRATION_ENABLED: ${WORKER_INTEGRATION_ENABLED:-true}
      WORKER_NOTIFICATION_ENABLED: ${WORKER_NOTIFICATION_ENABLED:-true}
      WORKER_SCREENSHOT_CONCURRENCY: ${WORKER_SCREENSHOT_CONCURRENCY:-5}
      WORKER_REPLAY_CONCURRENCY: ${WORKER_REPLAY_CONCURRENCY:-3}
      WORKER_INTEGRATION_CONCURRENCY: ${WORKER_INTEGRATION_CONCURRENCY:-10}
      WORKER_NOTIFICATION_CONCURRENCY: ${WORKER_NOTIFICATION_CONCURRENCY:-5}
      
      # Job Configuration
      JOB_RETENTION_DAYS: ${JOB_RETENTION_DAYS:-7}
      MAX_JOB_RETRIES: ${MAX_JOB_RETRIES:-3}
    volumes:
      # Optional: Mount local storage directory
      - worker_uploads:/app/data/uploads
    networks:
      - bugspotter
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z redis 6379 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# ============================================================================
# Named Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  api_uploads:
    driver: local
  worker_uploads:
    driver: local

# ============================================================================
# Networks
# ============================================================================
networks:
  bugspotter:
    driver: bridge
