name: CI

# This workflow runs CI checks for the BugSpotter monorepo
# Structure: pnpm workspace with packages/ and apps/ directories
# Packages: @bugspotter/sdk, @bugspotter/types, @bugspotter/backend-mock

on:
  push:
    branches: [main, develop]  # Only on main/develop to avoid duplicate runs
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format:check

  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Currently testing only Node 20 (Active LTS) for faster CI
        # To test multiple versions, uncomment below:
        # node-version: [18, 20, 22]  # Node 18 (EOL April 2025), 20 (LTS), 22 (Current)
        node-version: [20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build types package
        run: |
          # Build @bugspotter/types first (required by SDK)
          pnpm --filter @bugspotter/types run build

      - name: Verify monorepo structure
        run: |
          echo "Verifying monorepo structure..."
          if [ ! -d "packages" ]; then
            echo "❌ Error: 'packages' directory not found"
            echo "This workflow requires a pnpm workspace with packages/ directory"
            exit 1
          fi
          echo "✅ packages/ directory exists"
          echo ""
          echo "Available packages:"
          ls -1 packages/ | sed 's/^/  - /'

      - name: Run unit tests
        run: |
          # Run SDK unit tests
          pnpm --filter @bugspotter/sdk run test

          # Skip API contract tests in CI (they require running server)
          # API contract tests should be run locally or in integration test environment
          echo "⏭️  Skipping API contract tests (require running server)"

      - name: Run E2E tests
        run: |
          # Run SDK E2E tests (integration, config, performance)
          pnpm --filter @bugspotter/sdk run test:e2e

  test-backend:
    name: Backend Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Currently testing only Node 20 (Active LTS) for faster CI
        # Testcontainers spin up a new PostgreSQL container for each Node version
        # Testing all versions increases CI time by ~6-9 minutes
        # To test multiple versions, uncomment below:
        # node-version: [18, 20, 22]  # Node 18 (EOL April 2025), 20 (LTS), 22 (Current)
        node-version: [20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build types package
        run: |
          # Build @bugspotter/types first (required by backend)
          pnpm --filter @bugspotter/types run build

      - name: Run backend tests
        run: |
          # Testcontainers will automatically start PostgreSQL
          # Docker is available on GitHub Actions runners by default
          pnpm --filter @bugspotter/backend run test

  playwright:
    name: Playwright Browser Tests
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build dependencies
        run: |
          # Build @bugspotter/types first (required by SDK)
          pnpm --filter @bugspotter/types run build

      - name: Build SDK for browser tests
        run: |
          # Playwright tests require built SDK bundle
          pnpm --filter @bugspotter/sdk run build

          # Verify SDK bundle was created
          if [ ! -f "packages/sdk/dist/bugspotter.min.js" ]; then
            echo "❌ SDK bundle not found after build"
            exit 1
          fi
          echo "✅ SDK bundle created successfully"
          ls -lh packages/sdk/dist/bugspotter.min.js

      - name: Install Playwright browsers
        run: |
          # Install Chromium only for browser tests (faster CI)
          pnpm --filter @bugspotter/sdk exec playwright install --with-deps chromium

      - name: Run Playwright browser tests
        run: |
          # Run browser tests in Chromium only
          pnpm --filter @bugspotter/sdk run test:playwright --project=chromium

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-sdk
          path: packages/sdk/playwright-report/
          retention-days: 7

  playwright-admin:
    name: Admin E2E Tests
    runs-on: ubuntu-latest
    needs: [test, test-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Create .env file
        run: |
          cat > .env << 'EOF'
          # PostgreSQL
          POSTGRES_DB=bugspotter
          POSTGRES_USER=bugspotter
          POSTGRES_PASSWORD=bugspotter_ci_password

          # MinIO
          MINIO_ROOT_USER=minioadmin
          MINIO_ROOT_PASSWORD=minioadmin123
          MINIO_BUCKET=bugspotter

          # Security
          JWT_SECRET=ci_jwt_secret_key_for_testing_only_not_production
          ENCRYPTION_KEY=ci_encryption_key_for_testing_only_32bytes

          # Environment
          NODE_ENV=production
          LOG_LEVEL=info
          CORS_ORIGINS=http://localhost:3001
          EOF

      - name: Start Docker services
        run: |
          docker compose up -d --wait --wait-timeout 120
          echo "✅ Docker services started"

      - name: Verify services health
        run: |
          echo "Checking service health..."
          docker compose ps
          
          # Wait for API to be fully ready
          for i in {1..30}; do
            if curl -f http://localhost:3000/ready; then
              echo "✅ API is ready"
              break
            fi
            echo "Waiting for API... ($i/30)"
            sleep 2
          done
          
          # Verify admin panel
          if curl -f http://localhost:3001/; then
            echo "✅ Admin panel is accessible"
          else
            echo "❌ Admin panel not accessible"
            exit 1
          fi

      - name: Setup admin user
        run: |
          chmod +x ./setup-admin.sh
          ./setup-admin.sh
          echo "✅ Admin user created"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers for admin
        run: |
          # Install Chromium with dependencies
          pnpm --filter @bugspotter/admin exec playwright install --with-deps chromium

      - name: Run admin E2E tests
        env:
          BASE_URL: http://localhost:3001
        run: |
          # Run admin E2E tests in Chromium
          pnpm --filter @bugspotter/admin run test:e2e --project=chromium

      - name: Upload admin E2E report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-admin
          path: apps/admin/playwright-report/
          retention-days: 7

      - name: Collect Docker logs on failure
        if: failure()
        run: |
          echo "=== API Logs ==="
          docker compose logs api --tail=100
          echo "=== Admin Logs ==="
          docker compose logs admin --tail=100
          echo "=== Postgres Logs ==="
          docker compose logs postgres --tail=50

      - name: Stop Docker services
        if: always()
        run: docker compose down -v

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, test-backend, playwright, playwright-admin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify monorepo structure
        run: |
          echo "Verifying monorepo structure..."
          if [ ! -d "packages" ]; then
            echo "❌ Error: 'packages' directory not found"
            echo "This workflow requires a pnpm workspace with packages/ directory"
            exit 1
          fi
          echo "✅ packages/ directory exists"

      - name: Build packages
        run: |
          # Build types first, then other packages
          # This ensures @bugspotter/types is available for backend and SDK
          pnpm --filter @bugspotter/types run build
          pnpm --recursive --filter "./packages/**" --filter "!@bugspotter/types" run build

      - name: Upload SDK build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sdk-build
          path: packages/sdk/dist/
          retention-days: 7

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [test, test-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build types package
        run: |
          # Build @bugspotter/types first (required by SDK and backend)
          pnpm --filter @bugspotter/types run build

      - name: Run SDK tests with coverage
        run: |
          # Run SDK unit tests with coverage (single run on Node 20)
          pnpm --filter "@bugspotter/sdk" run test -- --coverage

          # Run SDK E2E tests with coverage
          pnpm --filter "@bugspotter/sdk" run test:e2e -- --coverage

      - name: Run backend tests with coverage
        run: |
          # Testcontainers will automatically start PostgreSQL
          pnpm --filter @bugspotter/backend run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./packages/*/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
